# Generated by Django 2.2.24 on 2022-04-23 01:22

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import location_field.models.plain


class Migration(migrations.Migration):

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('social', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('eventcreateddate', models.DateTimeField(default=django.utils.timezone.now)),
                ('eventname', models.TextField(default='Event Name')),
                ('eventdescription', models.TextField(blank=True, null=True)),
                ('event_wiki_description', models.TextField(blank=True, null=True)),
                ('eventpicture', models.ImageField(default='uploads/event_pictures/default.png', upload_to='uploads/event_pictures/')),
                ('eventlocation', location_field.models.plain.PlainLocationField(default='41.0255493,28.9742571', max_length=63)),
                ('eventdate', models.DateTimeField(default=django.utils.timezone.now)),
                ('eventcapacity', models.IntegerField(default=1)),
                ('eventduration', models.IntegerField(default=1)),
                ('isDeleted', models.BooleanField(default=False)),
                ('isActive', models.BooleanField(default=True)),
                ('eventcreater', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Featured',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(default=django.utils.timezone.now)),
                ('operation', models.TextField(blank=True, null=True)),
                ('itemType', models.TextField(blank=True, null=True)),
                ('itemId', models.IntegerField(default=0)),
            ],
        ),
        migrations.AddField(
            model_name='service',
            name='capacity',
            field=models.IntegerField(default=1),
        ),
        migrations.AddField(
            model_name='service',
            name='duration',
            field=models.IntegerField(default=1),
        ),
        migrations.AddField(
            model_name='service',
            name='isActive',
            field=models.BooleanField(default=True),
        ),
        migrations.AddField(
            model_name='service',
            name='isDeleted',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='service',
            name='is_given',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='service',
            name='is_taken',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='service',
            name='location',
            field=location_field.models.plain.PlainLocationField(default='41.0255493,28.9742571', max_length=63),
        ),
        migrations.AddField(
            model_name='service',
            name='name',
            field=models.TextField(default='Service Name'),
        ),
        migrations.AddField(
            model_name='service',
            name='picture',
            field=models.ImageField(default='uploads/service_pictures/default.png', upload_to='uploads/service_pictures/'),
        ),
        migrations.AddField(
            model_name='service',
            name='servicedate',
            field=models.DateTimeField(default=django.utils.timezone.now),
        ),
        migrations.AddField(
            model_name='service',
            name='wiki_description',
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='service',
            name='description',
            field=models.TextField(blank=True, null=True),
        ),
        migrations.CreateModel(
            name='UserRatings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.IntegerField(null=True)),
                ('feedback', models.TextField(blank=True, null=True)),
                ('rated', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rated', to=settings.AUTH_USER_MODEL, verbose_name='user')),
                ('rater', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rater', to=settings.AUTH_USER_MODEL, verbose_name='user')),
                ('service', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='social.Service')),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='profile', serialize=False, to=settings.AUTH_USER_MODEL, verbose_name='user')),
                ('name', models.CharField(blank=True, max_length=30, null=True)),
                ('bio', models.TextField(blank=True, max_length=500, null=True)),
                ('birth_date', models.DateTimeField(blank=True, null=True)),
                ('location', location_field.models.plain.PlainLocationField(default='41.0255493,28.9742571', max_length=63)),
                ('picture', models.ImageField(default='uploads/profile_pictures/default.png', upload_to='uploads/profile_pictures/')),
                ('credithour', models.IntegerField(default=5)),
                ('reservehour', models.IntegerField(default=0)),
                ('unreadcount', models.IntegerField(default=0)),
                ('isAdmin', models.BooleanField(default=False)),
                ('isActive', models.BooleanField(default=True)),
                ('followers', models.ManyToManyField(blank=True, related_name='followers', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserComplaints',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('feedback', models.TextField(blank=True, null=True)),
                ('isDeleted', models.BooleanField(default=False)),
                ('complainted', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='complainted', to=settings.AUTH_USER_MODEL, verbose_name='user')),
                ('complainter', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='complainter', to=settings.AUTH_USER_MODEL, verbose_name='user')),
            ],
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tag', models.TextField(default='')),
                ('requester', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='requester', to=settings.AUTH_USER_MODEL, verbose_name='user')),
                ('toPerson', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='toPerson', to=settings.AUTH_USER_MODEL, verbose_name='user')),
            ],
        ),
        migrations.CreateModel(
            name='ServiceApplication',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(default=django.utils.timezone.now)),
                ('approved', models.BooleanField(default=False)),
                ('isDeleted', models.BooleanField(default=False)),
                ('deletionInfo', models.TextField(blank=True, null=True)),
                ('isActive', models.BooleanField(default=True)),
                ('applicant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rel_services', to='social.Service')),
            ],
        ),
        migrations.CreateModel(
            name='NotifyUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notification', models.TextField(blank=True, null=True)),
                ('hasRead', models.BooleanField(default=False)),
                ('offerType', models.TextField(blank=True, null=True)),
                ('offerPk', models.IntegerField(default=0)),
                ('notify', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notify', to=settings.AUTH_USER_MODEL, verbose_name='user')),
            ],
        ),
        migrations.CreateModel(
            name='Log',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(default=django.utils.timezone.now)),
                ('operation', models.TextField(blank=True, null=True)),
                ('itemType', models.TextField(blank=True, null=True)),
                ('itemId', models.IntegerField(default=0)),
                ('affectedItemType', models.TextField(blank=True, null=True)),
                ('affectedItemId', models.IntegerField(default=0)),
                ('userId', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='userId', to=settings.AUTH_USER_MODEL, verbose_name='user')),
            ],
        ),
        migrations.CreateModel(
            name='Like',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(default=django.utils.timezone.now)),
                ('itemType', models.TextField(blank=True, null=True)),
                ('itemId', models.IntegerField(default=0)),
                ('liked', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='liked', to=settings.AUTH_USER_MODEL, verbose_name='user')),
            ],
        ),
        migrations.CreateModel(
            name='EventApplication',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(default=django.utils.timezone.now)),
                ('approved', models.BooleanField(default=False)),
                ('isDeleted', models.BooleanField(default=False)),
                ('deletionInfo', models.TextField(blank=True, null=True)),
                ('isActive', models.BooleanField(default=True)),
                ('applicant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='social.Event')),
            ],
        ),
        migrations.CreateModel(
            name='Communication',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(default=django.utils.timezone.now)),
                ('itemType', models.TextField(blank=True, null=True)),
                ('itemId', models.IntegerField(default=0)),
                ('message', models.TextField(blank=True, null=True)),
                ('communicated', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='communicated', to=settings.AUTH_USER_MODEL, verbose_name='user')),
            ],
        ),
        migrations.AddField(
            model_name='service',
            name='category',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='category', to='social.Tag', verbose_name='category'),
        ),
    ]
